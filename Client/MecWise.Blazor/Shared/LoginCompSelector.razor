@inject SessionState Session;

    <div class="login-container">
        <div class="container p-4">
            <div class="login-logo-container"></div>
            <CompForm DataSource="@_formDataSrouce" Fields="@_fields"></CompForm>
        </div>
    </div>

@code{
    JObject _formDataSrouce = new JObject();
    FieldCollection _fields = new FieldCollection();

    [Parameter]
    public List<SV_MF_COMP> DataSource { get; set; }

    [Parameter]
    public EventCallback<object> OnClickOk { get; set; }

    private void InitData()
    {
    }

    private void InitFields()
    {
        _fields.Clear();

        //FieldTitleBar titlebar = new FieldTitleBar();
        //titlebar.TitleText = string.Format("{0} - Login", Session.AppConfig.appTitle);
        //_fields.Add(titlebar);

        //FieldContainer bufferRow = new FieldContainer("row");
        //_fields.Add(bufferRow);

        FieldContainer container = new FieldContainer("container-fluid d-flex-column mt-0");

        FieldContainer row1 = new FieldContainer("row");
        FieldSelect cboComp = new FieldSelect("cboComp", "Please select company.", "col-12");
        foreach (SV_MF_COMP comp in DataSource) {
            cboComp.AddItem(comp.COMP_CODE, comp.COMP_NAME);
        }
        cboComp.OnChange += cboComp_OnChange;
        row1.Fields.Add(cboComp);
        container.Fields.Add(row1);

        FieldContainer row2 = new FieldContainer("row");
        FieldButton btnOk = new FieldButton("btnOk", "Ok", "col-6");
        btnOk.StyleClass = "btn-primary";
        btnOk.OnClick += btnOk_OnClick;
        btnOk.Disabled = true;
        row2.Fields.Add(btnOk);
        container.Fields.Add(row2);


        _fields.Add(container);
    }

    protected override void OnInitialized()
    {
        //assign config to Session
        InitData();
        InitFields();
    }

    private void cboComp_OnChange(object sender, FieldChangeEventArgs e) {
        if (!string.IsNullOrEmpty(e.Value))
        {
            Session.CompCode = e.Value;
            _fields.Search("btnOk").Disabled = false;
        }
        else
        {
            _fields.Search("btnOk").Disabled = true;
        }
        _fields.Render = true;
        StateHasChanged();
    }

    private void btnOk_OnClick(object sender, FieldClickEventArgs e) {
        OnClickOk.InvokeAsync(e);
    }

}
