@using Newtonsoft.Json.Linq;

@inject SessionState Session;
@inject IJSRuntime JSRuntime;
@inject HttpClient Http;
@inject NavigationManager NavigationManager;

@if (_readyToDisplay)
{
    @if (!string.IsNullOrEmpty(_message)) {
        <div class="login-container" style="font-size:1.2rem;min-height:300px">
            <div class="container p-4 text-center">
                <div class="login-logo-container"></div>
                <p style="margin-top:10px;color:red">@_message</p>
                <a href="javascript:window.location.replace('');">Click here to login again.</a>
            </div>
        </div>
    }
    else {
        <div class="login-container">
            <div class="container">
                <div class="login-logo-container"></div>
                <CompForm DataSource="@_formDataSrouce" Fields="@_fields" OnChange="@Form_OnChange">
                </CompForm>
            </div>
        </div>    
    }
    
}

@code {

    //string _loginBtnActiveClass = "btn-primary w-100 h-100 rounded-lg";
    //string name; string value; int days;

    //string _loginBtnClass;
    bool _readyToDisplay = false;
    string _message = string.Empty;
    JObject _formDataSrouce = new JObject();
    Config _config;

    FieldCollection _fields = new FieldCollection();

    private void InitData()
    {
        _formDataSrouce.Add("UserID", "");
        _formDataSrouce.Add("UserPassword", "");
    }

    private void InitFields()
    {
        _fields.Clear();

        //FieldTitleBar titlebar = new FieldTitleBar();
        //titlebar.TitleText = string.Format("{0} - Login", SessionState.AppConfig.appTitle);
        //_fields.Add(titlebar);

        FieldContainer container = new FieldContainer("container-fluid d-flex-column mt-0");

        FieldContainer row1 = new FieldContainer("row mt-0");
        FieldText userID = new FieldText("UserID", "", "col-12 mt-0", false, false, "User Name", FieldTextMode.text);
        FieldTextButton txtBtnUser = new FieldTextButton();
        txtBtnUser.name = "btnTxtUser";
        txtBtnUser.location = FieldTextButtonLocation.after;
        txtBtnUser.options.disabled = true;
        txtBtnUser.options.icon = "oi oi-person";
        txtBtnUser.options.type = FieldTextButtonType.normal;
        txtBtnUser.options.stylingMode = FieldTextButtonStylingMode.text;
        userID.buttons.Add(txtBtnUser.name, txtBtnUser);

        row1.Fields.Add(userID);
        container.Fields.Add(row1);


        FieldContainer row2 = new FieldContainer("row mt-0 justify-content-end");
        FieldButton btnSubmit = new FieldButton("btnSubmit", "SUBMIT", "col-5");
        btnSubmit.StyleClass = "btn-primary";
        btnSubmit.OnClick += btnSubmit_OnClick;

        FieldButton btnCancel = new FieldButton("btnCancel", "CANCEL", "col-5");
        btnCancel.StyleClass = "btn-primary";
        btnCancel.OnClick += btnCancel_OnClick;

        row2.Fields.Add(btnSubmit);
        row2.Fields.Add(btnCancel);
        container.Fields.Add(row2);

        _fields.Add(container);

    }

    private async Task InitAsync()
    {
        if (_config == null) {
            _config = await Http.GetFromJsonAsync<Config>("config.json?time=" + DateTime.Now.ToString("yyyymmddhhmmss"));
        }
        Session.InitConfig(JSRuntime, _config);

        InitData();
        InitFields();
        _readyToDisplay = true;

        StateHasChanged();

        //Session.InitAPIService();
    }

    private void Form_OnChange(FieldChangeEventArgs e)
    {
        _formDataSrouce = e.DataSource;

    }

    private void btnCancel_OnClick(object sender, FieldClickEventArgs e) {
        Session.UserID = string.Empty;
        NavigationManager.NavigateTo("");
    }

    private async void btnSubmit_OnClick(object sender, FieldClickEventArgs e)
    {

        string userId = _formDataSrouce["UserID"].ToStr();

        if (string.IsNullOrEmpty(userId)) {
            Session.ToastMessage("Please enter User Name!", ToastMessageType.error);
            return;
        }


        FieldText txtUserID = (FieldText)_fields.Search("UserID");
        
        FieldButton btnSubmit = (FieldButton)_fields.Search("btnSubmit");
        FieldButton btnCancel = (FieldButton)_fields.Search("btnCancel");

        btnSubmit.Disabled = true;
        btnCancel.Disabled = true;
        txtUserID.Disabled = true;
        StateHasChanged();

        //if (!await Session.LoginAsync(userId, password)) {
        //    Session.ToastMessage("Invalid User Name or Password!", ToastMessageType.error);
        //    btnSubmit.Disabled = false;
        //    btnCancel.Disabled = false;
        //    txtUserID.Disabled = false;

        //    _fields.Render = true;
        //    StateHasChanged();
        //    return;
        //}

        // All validation are Ok, reset password
        Session.UserID = userId;
        string message = await ResetPasswordAsync(userId);
        if (!string.IsNullOrEmpty(message)) {
            //Show success message
            _message = message;
            StateHasChanged();
        }
        
    }

    public async Task<string> ResetPasswordAsync(string userId) {
        string url = string.Format("Login/ResetPassword");
        JObject postData = new JObject();
        postData.Add("userId", userId);
        return await Session.PostJsonAsync<string>(url, postData);
    } 


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            await InitAsync();
        }
    }


}


