@using Microsoft.JSInterop
@using Newtonsoft.Json.Linq
@inject IJSRuntime JSRuntime;

@if (EditorField == null) {
    <p>Loading</p>
}
else {

    string description = EditorField.Description;
    string cssClass = "";

    if (string.IsNullOrEmpty(description.ToStr().Trim())) {
        description = " ";
    }
    else {
        if (description.Substring(description.Length - 1, 1) != ":")
            description += ":";
    }

    if (EditorField is FieldCheckBox) {
        description = " ";
        cssClass = "pt-1";
    }

    <div id="@(EditorField.ElementID + "_Container")" class="top-buffer-medium p-0 @EditorField.StyleClassWidth">
        <div id="@(EditorField.ElementID + "_SubContainer")" class="col">
            <span id="@(EditorField.ElementID + "_Label")" class="text-info d-block" style="white-space:pre;">@description</span>
            <div id="@EditorField.ElementID" field-type="@EditorField.GetFieldType()" class="@cssClass" code-desc="@EditorField.CodeDesc"></div>
        </div>
    </div>
}


@code {

    JObject dxFieldProp = new JObject();

    [Parameter]
    public FieldEditor EditorField { get; set; }


    [Parameter]
    public EventCallback<FieldChangeEventArgs> OnChange { get; set; }

    [Parameter]
    public EventCallback OnFocusIn { get; set; }

    [Parameter]
    public EventCallback OnFocusOut { get; set; }

    protected override async Task OnParametersSetAsync() {
        await InitFieldPropAsync();
    }


    private async Task InitFieldPropAsync() {
        if (EditorField != null) {
            if (dxFieldProp.ToString() != EditorField.GetFieldProp().ToString()) {
                dxFieldProp = EditorField.GetFieldProp();
                await JSRuntime.InvokeAsync<object>("_assign_field_prop", EditorField.ElementID, dxFieldProp.ToString());
            }
        }
    }

    protected override bool ShouldRender() {
        if (dxFieldProp.ToString() != EditorField.GetFieldProp().ToString() || EditorField.Render)
        {
            return true;
        }

        return false;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await JSRuntime.InvokeAsync<object>("controlEventHandler", EditorField.ElementID, "EventCallBackMethod", DotNetObjectReference.Create(this));
            await JSRuntime.InvokeAsync<object>("_render_field", EditorField.ElementID);
            dxFieldProp = EditorField.GetFieldProp();
            await JSRuntime.InvokeAsync<object>("_assign_field_prop", EditorField.ElementID, dxFieldProp.ToString());
        }
        EditorField.Render = false;
    }

    [JSInvokable]
    public async void EventCallBackMethod(string jsonEventData) {

        JObject jObj = JObject.Parse(jsonEventData);
        EditorField.Value = jObj["Value"];

        if (jObj.ContainsKey("EventType")) {
            if (jObj["EventType"].ToStr() == "focusin") {
                EditorField.InvokeOnFocusIn(EditorField);
                await OnFocusIn.InvokeAsync(EditorField);
            }
            else if (jObj["EventType"].ToStr() == "focusout") {
                EditorField.InvokeOnFocusOut(EditorField);
                await OnFocusOut.InvokeAsync(EditorField);
            }
            else {
                FieldChangeEventArgs args = new FieldChangeEventArgs();
                args.FieldId = EditorField.ID; //jObj["FieldId"].ToString();
                args.PreviousValue = jObj["PreviousValue"].ToString();
                args.Value = jObj["Value"].ToString();

                if (EditorField is FieldDate)
                {
                    if (!string.IsNullOrEmpty(jObj["Value"].ToStr())) {
                        args.Value = jObj["Value"].ToDate().ToString("yyyy-MM-ddTHH:mm:ss");
                    }
                }

                if (EditorField is FieldCheckBox)
                {
                    args.Value = jObj["Value"].ToInt().ToStr();
                }

                if (EditorField is FieldText)
                {
                    if (((FieldText)EditorField).CharacterCase == FieldTextBoxCharacterCase.uppercase)
                    {
                        args.Value = jObj["Value"].ToString().ToUpper();
                    }

                    if (((FieldText)EditorField).CharacterCase == FieldTextBoxCharacterCase.lowercase)
                    {
                        args.Value = jObj["Value"].ToString().ToLower();
                    }
                }

                EditorField.CodeDesc = "";

                EditorField.InvokeOnChange(EditorField, args);
                await OnChange.InvokeAsync(args);
            }

        }


    }
}

